name: Terraform AWS Lambda Deployment Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-lambda-deploy

description: |-
  Terraform module for deploying AWS Lambda functions. This module supports various configurations 
  including environment variables, VPC settings, and IAM roles. It also allows for the deployment of 
  Lambda layers and integrates with AWS CloudWatch for logging and monitoring.

# Introduction to the project
introduction: |-
  The AWS Lambda Deployment Module is a comprehensive Terraform solution for deploying and managing AWS Lambda functions. 
  Key features include:
  - Flexible configuration of Lambda function settings including memory, timeout, and concurrency
  - VPC integration with optional security group creation
  - Support for Lambda layers and environment variables
  - CloudWatch logging integration
  - EFS integration capabilities
  - Lambda URL endpoints with CORS support
  - Alias management and provisioned concurrency configuration

# How to use this project
usage: |-
  To use this module, include it in your Terraform configuration:

  ```hcl
  module "lambda" {
    source = "github.com/cloudopsworks/terraform-module-aws-lambda-deploy"

    namespace        = "dev"
    versions_bucket  = "my-lambda-bucket"
    bucket_path     = "function.zip"

    release = {
      name = "my-function"
      source = {
        version = "1.0.0"
      }
    }

    lambda = {
      handler  = "index.handler"
      runtime  = "nodejs18.x"
      timeout  = 30
      memory_size = 256
      environment = {
        variables = [
          { name = "ENV", value = "development" }
        ]
      }
    }
  }
  ```
  
  #### Configuration Parameters
  ```yaml
  lambda:
    arch: x86_64 | arm64
    iam: {}
    #  enabled: true
    #  execRole:
    #    enabled: true
    #    principals:
    #      - lambda.amazonaws.com
    #      - apigateway.amazonaws.com
    #  policy_attachments:
    #    - arn: arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
    #  statements:
    #    - effect: Allow # Uncomment below to if vpc.enabled = true
    #      action:
    #        - ec2:CreateNetworkInterface
    #        - ec2:DescribeNetworkInterfaces
    #        - ec2:DeleteNetworkInterface
    #        - ec2:AssignPrivateIpAddresses
    #        - ec2:UnassignPrivateIpAddresses
    #      resource:
    #        - "*"
    #    - effect: Allow # Uncomment below to if vpc.enabled = true
    #      action:
    #        - ec2:DescribeSecurityGroups
    #        - ec2:DescribeSubnets
    #        - ec2:DescribeVpcs
    #      resource:
    #        - "*"
    #    - effect: Allow
    #      action:
    #        - s3:PutObject
    #        - s3:GetObject
    #        - s3:DeleteObject
    #        - s3:ListBucket
    #      resource:
    #        - arn:aws:s3:::<bucket-name>
    #        - arn:aws:s3:::<bucket-name>/*
    #    - effect: Allow
    #      action:
    #        - s3:ListAllMyBuckets
    #      resource:
    #        - "*"
    #    - effect: Allow
    #      action:
    #        - dynamodb:PutItem
    #        - dynamodb:GetItem
    #        - dynamodb:DeleteItem
    #        - dynamodb:UpdateItem
    #        - dynamodb:Scan
    #        - dynamodb:Query
    #      resource:
    #        - arn:aws:dynamodb:<region>:123456789012:table/<dynamodb-table>
    #        - arn:aws:dynamodb:<region>:123456789012:table/<dynamodb-table>/*
    #    - effect: Allow
    #      action:
    #        - dynamodb:ListTables
    #      resource:
    #        - "*"
    environment:
      variables:
        - name: key
          value: value
    handler: index.handler
    runtime: java21
    #memory_size: 128
    #reserved_concurrency: -1
    #timeout: 3
    # Provisioned concurrency enables if uncomment and set > 1
    #provisioned_concurrent_executions: 1
  
    ##
    # Optional: if you want to create an alias for the Lambda function
    #alias:
    #  enabled: true
    #  name: "prod" # prod | uat | dev | demo
    #  routing_config:
    #    - version: "1" # Version of the Lambda function
    #      weight: 1.0 # Weight for the routing, can be between 0.0 and 1.0
  
    ##
    # Optionals: function Urls
    functionUrls: []
    #  - id: prod
    #    qualifier: "prod"
    #    authorizationType: "AWS_IAM"
    #    cors:
    #      allowCredentials: true
    #      allowMethods:
    #        - "GET"
    #        - "POST"
    #      allowOrigins:
    #        - "*"
    #      allowHeaders:
    #        - "date"
    #        - "keep-alive"
    #      exposeHeaders:
    #        - "date"
    #        - "keep-alive"
    #      maxAge: 86400
    #  - id: "dev"
    #    authorizationType: "NONE"
    ##
    # Optionals: event bridge scheduling
    #            Remove comment on items to enable
    schedule:
      enabled: false                      # (optional) Enable or disable singe schedule
      schedule_group: "my-schedule-group" # (optional) Schedule group name, schedule group must already exists
      flexible:                     # (optional) Flexible scheduling, can be used to create a flexible schedule for the Lambda function, only available if schedule.enabled is true
        enabled: true
        maxWindow: 20               # Minutes
      expression: "rate(1 hour)"    # (optional) Schedule expression, can be cron or rate, required if enabled is true
      timezone: "UTC-3"             # (optional) Timezone for the schedule, defaults to UTC
      suspended: false              # (optional) Whether the schedule is suspended, defaults to false
      payload: {} | ""              # (optional) Payload to send to the Lambda function, can be YAML (will be converted to JSON), JSON or string, defaults to null
      multiple:              # (optional) Multiple schedules, can be used to create multiple schedules for the same Lambda function, only available if schedule.enabled is false
        - expression: "rate(1 hour)"    # (required) Schedule expression, can be cron or rate, required if enabled is true
          flexible:                     # (optional) Flexible scheduling, can be used to create a flexible schedule for the Lambda function, only available if schedule.enabled is true
            enabled: true
            maxWindow: 20               # Minutes
          timezone: "UTC-3"             # (optional) Timezone for the schedule, defaults to UTC
          suspended: false              # (optional) Whether the schedule is suspended, defaults to false
          payload: {} | ""              # (optional) Payload to send to the Lambda function, can be YAML (will be converted to JSON), JSON or string, defaults to null
        - expression: "0 10 * * *"      # (required) Schedule expression, can be cron or rate, required if enabled is true
          flexible:                     # (optional) Flexible scheduling, can be used to create a flexible schedule for the Lambda function, only available if schedule.enabled is true
            enabled: true
            maxWindow: 20 # Minutes
          timezone: "UTC-3"             # (optional) Timezone for the schedule, defaults to UTC
          suspended: false              # (optional) Whether the schedule is suspended, defaults to false
          payload: {} | ""              # (optional) Payload to send to the Lambda function, can be YAML (will be converted to JSON), JSON or string, defaults to null
  
    ##
    # VPC configuration for the Lambda function
    vpc:
      enabled: false
      create_security_group: false
      security_groups: []
      #  - sg-1234567890abcdef0
      #  - sg-1234567890abcdef1
      subnets: []
      #  - subnet-1234567890abcdef0
  
    ##
    # Optional: logging config
    #logging:
    #  application_log_level: "INFO"
    #  log_format: JSON | Text
    #  system_log_level: INFO | DEBUG | ERROR
  
    ##
    # Optional: Xray tracing enable
    tracing: {}
    #  enabled: true
    #  mode: Active | PassThrough
  
    ##
    # Optional: Change default lambda ephemeral storage
    #ephemeral_storage:
    #  enabled: true
    #  size: 1024 # Default is 512
  
    ##
    # Optional: EFS configuration
    #efs:
    #  enabled: true
    #  arn: arn:aws:elasticfilesystem:us-east-1:123456789012:file-system/fs-12345678
    #  local_mount_path: /mnt/efs
    
    ##
    # Optional: triggers notifications for the lambda function.
    triggers: {}
    #  s3:
    #    bucketName: BUCKET_NAME
    #    events:
    #      - s3:ObjectCreated:*
    #    filterPrefix: "OtherLogs/"
    #    filterSuffix: ".log"
    #  sqs:
    #    queueName: SQS_QUEUE_NAME
    #    batchSize: 10 # Optional: Maximum number of items to retrieve in a single batch, defaults to 10
    #    maximumConcurrency: 2 # Optional: Maximum number of concurrent messages to process
    #    metricsConfig: true # Optional: Enable metrics for the DynamoDB stream, defaults to false
    #    filterCriteria:
    #      body:
    #        Temperature:
    #          - numeric:
    #              - ">"
    #              - 0
    #              - "<="
    #              - 100
    #        Location:
    #          - New York
    #  dynamodb:
    #    tableName: DYNAMODB_TABLE_NAME
    #    startingPosition: LATEST | TRIM_HORIZON # Optional: Starting position for the stream, defaults to LATEST
    #    batchSize: 100 # Optional: Maximum number of records to retrieve in a single batch, defaults to 100
    #    maximumRetryAttempts: 3 # Optional: Maximum number of retry attempts for failed records, defaults to -1
    #    metricsConfig: true # Optional: Enable metrics for the DynamoDB stream, defaults to false
    #    filterCriteria:
    #      body:
    #        Temperature:
    #          - numeric:
    #              - ">"
    #              - 0
    #              - "<="
    #              - 100
    #        Location:
    #          - New York
  
    ## Lambda Layers
    layers: []
    #  - arn: arn:aws:lambda:us-east-1:123456789012:layer:my-layer:1
    #  - arn: arn:aws:lambda:us-east-1:123456789012:layer:my-layer:2
    #  - arn: arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-java-agent-amd64-ver-1-32-0:4
      
  ```

# Example usage
examples: |-
  Example Terragrunt configuration:

  ```hcl
  # terragrunt.hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "github.com/cloudopsworks/terraform-module-aws-lambda-deploy"
  }

  inputs = {
    namespace = "prod"
    release = {
      name = "api-handler"
      source = {
        version = "2.1.0"
      }
    }
    lambda = {
      handler = "api.handler"
      runtime = "nodejs18.x"
      vpc = {
        enabled = true
        create_security_group = true
        subnets = ["subnet-123", "subnet-456"]
      }
      environment = {
        variables = [
          { name = "NODE_ENV", value = "production" },
          { name = "API_KEY", value = "secret" }
        ]
      }
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Prepare your Lambda function code and package it as a ZIP file
  2. Upload the ZIP file to an S3 bucket
  3. Create a new Terraform configuration file
  4. Configure the module with required parameters:
     - Set the namespace and release name
     - Configure the Lambda handler and runtime
     - Specify the S3 bucket and path for the function code
     - Add any required environment variables
  5. Initialize Terraform:
     ```bash
     terraform init
     ```
  6. Review the planned changes:
     ```bash
     terraform plan
     ```
  7. Apply the configuration:
     ```bash
     terraform apply
     ```

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"